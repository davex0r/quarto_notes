---
title: "Second Generation Bioreactor Build Note"
author: 
 - name: David Jordan
   url: mailto:public@livingphysics.org
 - name: Somsubhro Bagchi
   url: mailto:som@livingphysics.org
code-fold: true
bibliography: references.bib
date: "2025-09-09"
categories: [Builds, Bioreactor]
csl: ../styles/american-physical-society.csl
draft: false
---
# Overview
This note outlines the build of our second generation bioreactor.  This version of the bioreactor includes [Temperature Control](#temp_system) and a [Pump System](#pumps) for exchanging media.  It can be run as a batch reaction with the pumps tuned off, or as a [Turbidostat](#turbidostat_mode) or a [Chemostat](#chemostat_mode).  This is not a sealed system as in [Bioreactor_v1](../gen1_reactor_build/index.qmd) so there are no pressure measurements for this system.

# Introduction
The second generation bioreactor was designed to enable continuous culturing of microbes.  Continuous culture refers to growth with very frequent small dilutions and removal of old media and cells.  This is in contrast to "batch culture" where a liquid broth is grown from a small number of cells to a high density, and then diluted all at once, usually by transferring a small volume of the dense culture to another large volume of fresh media.  There are different ways in which continuous cultures are realized.  The main challenge is setting the dilution rate such that the culture is always growing exponentially, without getting diluted to extinction or growing too dense for the measurement device.  This is can be done in a variety of ways, but two common methods are [chemostat](#chemostat_mode) operation and [turbidostat](#turbidostat_mode) operation. Conceptually, the turbidostat is easiest to understand.  In this mode, there is direct feedback from a cultures optical density to the dilution. One simple tragedy is to activate dilution when the OD is above a set-point until OD is brought to the set-point. Another strategy is to adjust the dilution rate in proportion to the difference from the setpoint with a feedback controller, such as a proportional integral differential (PID) controller. Another method we have implemented is based on state space prediction using a Kalman filter, which dilutes below the set point and allows the culture to regrow up to the setpoint in order to provide more accurate estimates of the growth rate[-@Hoffmann2017-po]. The chemostat was originally introduced b Novick and Szilard in 1950[-@Novick1950-fv].  A chemostat uses a liquid medium that has a single limiting nutrient that controls te growth rate, which is then set by the dilution rate $D$ where the doubling time $t_d$ is given by 
$$ \large t_d = \frac{ln 2}{D}$$  
The chemostat is designed so that the parameters of the culture (like growth rate, optical density, cell number, pH, etc) remain constant. 

![Bioreactor v2](images/Bioreactor_v2.jpeg)

# Design and Construction
## Temperature System {#temp_system}
The temperature control system is based on a PC water-cooling system.  In short, heated or cooled water is pumped around a closed loop which includes a sleeve that bathes the bottom of the vial.  The pump is a [PC liquid cooling pump](https://www.amazon.co.uk/Cooling-3000RPM-Integrated-Support-Intelligent-default/dp/B08CZW82T6).  This pumps water into an [aluminum heat exchanger](https://www.amazon.co.uk/dp/B09B36Q5T3) which has been attached to a [Peltier effect element](https://www.amazon.co.uk/dp/B08FBRY2BN) with [thermally conductive double stick tape](https://www.amazon.co.uk/dp/B0BN3R5717).  The opposite side of peltier element is attached to a [heat-sink and fan assembly](https://uk.rs-online.com/web/p/heatsinks/0158556).   There are 2 [inline thermistors](https://www.amazon.co.uk/dp/B08GJ72CC3) to measure the water temperature just after the and at the end of the loop jut before the pump.  The vials are sheathed in [motor water cooling jackets](https://www.amazon.co.uk/dp/B07MG4FKLB).  

![Motor cooling jacket repurposed as vial water bath](images/cooling_jacket.jpeg)

Originally this was designed to distribute the flow in parallel, but pressure differential issues resulted in uneven flows tot eh four reactors, so instead they are run in series.  This means that heat loss results in a gradient of temperatures from vial A (nearest to outflow) to vial D (farthest from outflow), but ths gradient is measured and recorded.  The current provided to the Peltier element is controlled by a [Cytron MD20A](https://uk.robotshop.com/products/cytron-20a-6-30v-single-dc-motor-controller) motor controller via a PWM signal from the Raspberry Pi.  The current passing through the peltier element is recorded by an [INA219](https://thepihut.com/products/adafruit-ina219-high-side-dc-current-sensor-breakout-26v-3-2a-max) chip via I2C with Qwiic connectors. The inline flow temperatures are converted to voltages using a simple 10kOhm voltage divider circuit an read into the Pi via one of the free ADC ports on one of the 2 [ADS7830](https://thepihut.com/products/adafruit-ads7830-8-channel-8-bit-adc-with-i2c-stemma-qt-qwiic) analog to digital converters. 

![Schematic of the PC Water-cooling based temperature controller](images/Bioreactor_v2_2025-Sep-12_01-46-52PM-000_CustomizedView28749035375.png)

## Pump System {#pumps}
The pump system consists of 8 [stepper motor controlled peristaltic pumps](https://www.amazon.co.uk/dp/B07RWNZDCR), a fresh media feed pump and a waste removal pump for each of the 4 bioreactor vials.  The pumps are powered by a dedicated [6A power supply](https://www.amazon.co.uk/dp/B0CGR54L81) and connected through a [USB hub](https://thepihut.com/products/10-port-usb-hub-5v-4a) to [Pololu Tic](https://www.pololu.com/product/3130) stepper motor controllers. The pumps are connected by luer lock adapters to stainless steel syringe needles in custom [3D printed caps](https://labcrafter.co.uk/products/40ml-glass-vial-cap-s-with-ports-and-stir-bar).  Pumps are connected to media feed bottle using these [custom printed lids](https://pioreactor.com/collections/accessories-and-parts/products/gl45-cap-with-luer-lock-connectors?variant=46788561403960) with the 14 inch tubing option.  



## Optical Density System {#od_system}
We used the design from 3D printed LED holder we developed for the [updated Bioreactor v1](../gen1_reactor_update_01/index.qmd), as well as the same [transimpedance amplifier circuit](../gen1_reactor_update_01/index.qmd#amplifier).  This comprises 12 voltage measurements that are read into 12/16 ports of a pair of ADS7830 ADCs.  The 3D printed LED holder sleeve is shown in black in the schematic diagram.

## Stirring and Illumination
The stirring and illumination system is also copied form our [v1 Bioreactor design](../gen1_reactor_build/index.qmd), using PC fans with attached magnets and 8 element Neopixel ring lights for programmable RGB illumination from below.  

# Control and Software {#control_software}
## Chemostat Mode {#chemostat_mode}
Chemostat operation relies on matched inflow and outflow to ensure that the culture volume does not drift overtime.  Despite extensive [calibration](#pump_calibration) efforts, the pump tolerances were not sufficient to maintain volumes over the extended run times.  

## Turbidostat Mode {#turbidostat_mode}
We implemented a turbidostat mode based on the Extended Kalman filter design of Holffmann and colleagues[-@Hoffmann2017-po]. Thius works by online estimation of a hidden state space of the culture which contains both estimates of its current OD and its growth rate. 
* **State variables**: The EKF tracks two hidden states:

  1. **Optical density (OD)** of the culture.
  2. **Growth rate (r)**, expressed as a geometric growth factor per time step.

* **Dynamic model**:
  They assume discrete exponential growth between measurements:
  [
  OD_{k+1} = OD_k \cdot r_k
  ]
  and
  [
  r_{k+1} = r_k,
  ]
  meaning OD changes multiplicatively with growth, while the growth rate is treated as constant between steps but can be updated when new information arrives.

* **Recursive estimation**:
  At every second, the EKF predicts the next OD and growth rate, then updates those predictions using the noisy optical density measurement. The Kalman gain balances trust between the model prediction and new data, depending on their variances.

* **Dilution events**:
  Since pump events cause sudden drops in OD, the filter assigns a **high uncertainty to OD estimates** during and immediately after dilution. This lets the OD quickly reconverge to the true density, while the growth rate estimate remains stable because its covariance is not reset. As a result, growth rate estimates survive dilution disturbances and retain continuity.

The code assciated with the implemenation of this mode can be found in the turbidostat_od_controller method and ExtendedKalmanFilter object method in src/utils in [Bioreactor_v2](https://github.com/livingphysics/Bioreactor_v2/blob/main/src/utils.py).  

# Calibration and Testing {#calibration}

## Temperature Control

Tempoerature control data can be pulled directly from the GitHub repository and plotted in-line with Quarto and Python.  Here we show the temperature difference 
```{python}
import pandas as pd
import matplotlib.pyplot as plt

# If file is local (after downloading from GitHub)
# df = pd.read_csv("20250901_131355_bioreactor_data.csv")

# Or load directly from GitHub raw link (requires internet access)
url = ("https://raw.githubusercontent.com/livingphysics/Bioreactor_v2/refs/heads/main/bioreactor_data/20250901_131355_bioreactor_data.csv")
df = pd.read_csv(url)
df = df.iloc[2000:]
# Compute difference
df['temp_diff'] = df['vial_D_temp'] - 27
data = df['vial_D_temp'] - 27
data = data.dropna()
std_dev = data.std()

# Plot histogram
plt.figure(figsize=(8, 5))
plt.hist(df['temp_diff'].dropna(), bins=12, density=True, edgecolor='black')
plt.xlabel('vial_D_temp − set_point(27) (°C)')
plt.ylabel('Probability Density')
plt.title(f'Histogram of Temperature Deviation\nStd Dev = {std_dev:.3f} °C')
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()
```

## Pump Calibration {#pump_calibration}
Pump calibration was carried out by measuring flow rates using an RS232 connected digital scale from [Kern](https://uk.rs-online.com/web/p/weighing-scales/2753858?gb=s) with a 0.001g resolution. Data was read using the pyserial function in Python.  Calibration is done by running each pump at a defined step rate for a fixed time, weighing the water before and after with the connected scale, and converting the change in mass (grams) to volume. The software repeats this several times, records the step rate, run duration, and measured flow rate (ml/s) into a CSV file, and then uses linear regression and plotting utilities to build a calibration curve that maps step rates to actual flow rates for each pump and direction.

## Temperature Controller {#temp_calibration}
